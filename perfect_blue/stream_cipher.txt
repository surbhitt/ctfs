
>writeup: https://github.com/apoirrier/CTFs-writeups/blob/master/PBCTF2021/Crypto/AlkaloidStream.md

>
 stream cipher: https://www.geeksforgeeks.org/stream-ciphers/
		every bit is enc, unlike in block cipher.

>python script to retrieve flag

	with open("output.txt", "r") as f:
	    c = bytes.fromhex(f.readline())
	    c = bytes_to_bits(c)
	    public = eval(f.read())
	
	ln = len(public)
	key = [0] * ln
	keystream = [0] * ln
	for i in range(ln-1,-1,-1):
 	   fake = 0
  	   for j in range(ln // 3):
	        if i + j + 1 >= ln:
	            break
	        fake ^= key[i + j + 1]	
	    for k in range(ln):
	        if fake in public[k]:
	            if fake == public[k][0]:
	                keystream[k] = 1
	                key[i] = public[k][1]
	            else:
	                keystream[k] = 0
	                key[i] = public[k][0]
	            public[k] = [-1, -1]
	            break

	flag = bits_to_bytes(xor(keystream, c))	
	print(flag)

>flag: pbctf{super_duper_easy_brute_forcing_actually_this_one_was_made_by_mistake} 

>
 bytes.fromhex(): https://pythontic.com/containers/bytes/fromhex
		  The class method fromHex() creates a bytes object from a string of hexadecimal digits.
 		  eg. sampleBytes = bytes.fromhex("01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f");
		      would evaluate on print(sampleBytes) to b'\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'
 eval(f.read()): https://www.geeksforgeeks.org/eval-in-python/
		 converts the text in file to python code.
 key = [0] * ln: creates an array of length ln